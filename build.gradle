apply plugin: 'application'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '0.0.1'

def mainClassName = 'jp.toastkid.script.Main'
def defaultEncoding = 'UTF-8'
def jdkVersion = '1.8'
def javafxHome = System.getenv('JAVA_HOME')
def antJavafxJar = 'build/classes/ant-javafx'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

repositories {
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

buildscript {
    repositories {
      mavenCentral()
    }
}

//this one works with file dependencies. If you prefer
configurations {
    provided
}

dependencies {
    provided files("${javafxHome}/jre/lib/ext/jfxrt.jar")
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'org.clojure:clojure:1.8.0'
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    provided 'org.apache.commons:commons-lang3:3.4'
    provided 'org.fxmisc.richtext:richtextfx:1.0.0-SNAPSHOT'
    provided 'org.eclipse.collections:eclipse-collections:8.0.0-M1'
    provided 'com.jfoenix:jfoenix:1.0.0'
    provided 'org.slf4j:slf4j-api:1.7.21'
    provided 'org.slf4j:slf4j-log4j12:1.7.21'

    testCompile 'junit:junit:4.11'
    testCompile 'org.testfx:testfx-junit:4.0.5-alpha'
    testCompile 'org.mockito:mockito-all:1.9.5'
}
compileJava {
    //add required JavaFX libs to compile classpath
    sourceSets.main.compileClasspath += configurations.provided
    sourceSets.main.compileClasspath += configurations.runtime
    sourceSets.main.compileClasspath += configurations.testCompile
}

run {
    //add required JavaFX libs to runtime classpath
    classpath += configurations.provided
    classpath += configurations.runtime
}
eclipse {
    classpath.defaultOutputDir = file('build')
    classpath {
        plusConfigurations += [ configurations.provided ]
    }
}

//create some smarter looking start scripts
startScripts {
    doLast {
        unixScript.text = "java -jar ../libs/$jar.archiveName"
        windowsScript.text = "java -jar ..\\libs\\$jar.archiveName"
    }
}

task excludedJar(type: Jar) {
    baseName = rootProject.name + "_excluded"
    destinationDir = projectDir
    from sourceSets.main.output
    exclude('com/**')
}

jar {
    manifest {
        attributes 'Main-Class' : mainClassName
    }
    destinationDir = projectDir
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}