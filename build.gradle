apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
version = '0.0.1'

mainClassName       = 'jp.toastkid.script.Main'
def defaultEncoding = 'UTF-8'
def jdkVersion      = '1.8'
def javafxHome      = System.getenv('JAVA_HOME')
def antJavafxJar    = 'build/classes/ant-javafx'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

repositories {
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

buildscript {
    repositories {
      mavenCentral()
    }
}

//this one works with file dependencies. If you prefer
configurations {
    provided
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'org.codehaus.groovy:groovy-all:2.5.0-alpha-1'
    provided 'org.apache.commons:commons-lang3:3.5'
    provided 'org.fxmisc.richtext:richtextfx:1.0.0-SNAPSHOT'
    provided 'com.jfoenix:jfoenix:1.0.0'
    provided 'org.slf4j:slf4j-api:1.7.21'
    provided 'org.slf4j:slf4j-log4j12:1.7.21'

    testCompile 'junit:junit:4.12'
    testCompile 'org.testfx:testfx-junit:4.0.5-alpha'
    testCompile 'org.mockito:mockito-all:1.9.5'
}
compileJava {
    sourceSets.main.compileClasspath += configurations.provided
    sourceSets.test.compileClasspath += configurations.provided
    sourceSets.main.compileClasspath += configurations.testCompile
}

run {
    classpath += configurations.provided
}

test {
    classpath += configurations.provided
}

eclipse {
    classpath.defaultOutputDir = file('build')
    classpath {
        plusConfigurations += [ configurations.provided ]
    }
}

startScripts {
    doLast {
        unixScript.text = "java -jar ../libs/$jar.archiveName"
        windowsScript.text = "java -jar ..\\libs\\$jar.archiveName"
    }
}

jar {
    manifest {
        attributes 'Main-Class' : mainClassName
    }
    destinationDir = projectDir
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task fatJar(type: Jar, dependsOn: compileJava) {
    baseName = project.name + "_executable"
    manifest {
        attributes 'Main-Class' : mainClassName
    }
    destinationDir = projectDir
    from configurations.compile.collect  { it.isDirectory() ? it : zipTree(it) }
    from configurations.provided.collect { it.isDirectory() ? it : zipTree(it) }
    from sourceSets.main.output
}

